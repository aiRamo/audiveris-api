% Feta (not the Font-En-Tja) music font -- draw flags
% This file is part of LilyPond, the GNU music typesetter.
%
% Copyright (C) 1997--2022 Han-Wen Nienhuys <hanwen@xs4all.nl>
%
% The LilyPond font is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version, or under the SIL Open Font License.
%
% LilyPond is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with LilyPond.  If not, see <http://www.gnu.org/licenses/>.

fet_begingroup ("flags");

save outer_path;
path outer_path;

%
% Flags pointing down overlap with the notehead (in x-direction), so
% the down-flag can be bigger.
%

upflag_width# = .65 black_notehead_width# + stemthickness# / 2;
downflag_width# = .833 black_notehead_width# + stemthickness# / 2;

right_upflag_space# = .0 upflag_width#;
right_downflag_space# = .0 downflag_width#;

%
% Flags pointing down cannot overlap with the notehead in y-direction,
% so they have less slant.
%
% Because of optical illusion, the utmost flag (bottom for
% down-pointing, top for up-pointing) should be smaller than the other
% flags.  Adobe Sonata doesn't do this correctly.  (Instead they have
% an extension flag, which looks less elegant.)
%

save hip_thickness, foot_thickness;

hip_thickness# = 1.0 linethickness# + 0.069 staff_space#;
foot_thickness# = 1.2055 linethickness# + 0.06 staff_space#;

define_pixels (hip_thickness, foot_thickness);

%
% Inspired by Adobe Sonata and [Wanske].
% For example, see POSTSCRIPT Language -- program design,
% page 119, and [Wanske], p 41, 42.
%

def draw_flag (expr center, flare, dims, hip_depth, foot_wid,
                    hip_thickness, foot_thickness, show_labels) =
  save c;

  clearxy;

  c = 0.7;

  penpos1 (flare, 90);
  penpos2 (whatever, 0);

  x2r - x2l = hround (hip_thickness);

  penpos3 (foot_thickness, -20.0);

  z1r = center;
  z2r = center + (xpart (dims), -ypart (dims) * hip_depth);
  z3r = center + (xpart (dims) * foot_wid, -ypart (dims));

  x2r := hround x2r;
  y2r := vround y2r;

  outer_path := z3r{curl c}
                .. z2r{up}
                .. {up}z1r;

  if show_labels = 1:
    penlabels (1, 2, 3);
  fi;

  fill z1l{curl 0}
       ..tension 1.1.. z2l{down}
       .. {curl c}simple_serif (z3l, z3r, 80)
       & outer_path
       & z1r
       -- cycle;
enddef;

%
% TODO: calculate intersectpoint (see TeX book, p. 137)
% TODO: calculate incision_depth
%

def add_flag (expr yoff, flare, hip_wid_multiplier, hip_dep_multiplier,
                   intersectpoint, hip_thickness, foot_thickness) =
  begingroup
    save prev_center, prev_xextreme, prev_yextreme;
    save rel_foot, ip, center, incision_depth;
    save prev_hipwid, prev_footdep, prev_hipdep, wid, dep, hip_dep;
    save hip_dep_ratio, foot_wid_ratio;
    pair prev_center, center, foot, prev_xextreme, prev_yextreme;
    pair ip, rel_foot;

    incision_depth = 1.013;
    prev_center = point 2 of outer_path;
    prev_xextreme = point 1 of outer_path;
    prev_yextreme = point 0 of outer_path;
    prev_hipwid = xpart (prev_xextreme - prev_center);
    prev_footdep = -ypart (prev_yextreme - prev_center);
    prev_hipdep = -ypart (prev_xextreme - prev_center);
    ip = point intersectpoint of outer_path;

    wid = prev_hipwid * hip_wid_multiplier;
    hip_dep = prev_hipdep * hip_dep_multiplier;

    center = prev_center + (0, yoff);
    rel_foot = incision_depth [(wid, hip_dep), ip - center];
    dep = -ypart (rel_foot);
    foot_wid_ratio = xpart (rel_foot) / wid;
    hip_dep_ratio = hip_dep / dep;

    draw_flag (center, flare, (wid, dep),
               hip_dep_ratio, foot_wid_ratio,
               hip_thickness, foot_thickness, 0);
  endgroup
enddef;


def upstemsingleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 1;
  total_depth# = (3 - shortening) * staff_space# - blot_diameter# / 2;
  flare = staff_space;
  flagspace# = staff_space#;
  hip_depth_ratio = .72;
  hip_width# = upflag_width# - hip_thickness# / 2;
  foot_width_ratio = .8;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_upflag_space#,
                foot_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 1);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));
enddef;


def upstemdoubleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 2;
  total_depth# = (3.5 - shortening) * staff_space# - blot_diameter# / 2;
  flare = .85 staff_space;
  flagspace# = .85 staff_space#;
  hip_depth_ratio = .72;
  hip_width# = upflag_width# - hip_thickness# / 2;
  foot_width_ratio = .8;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_upflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 1);

  add_flag (flagspace, flare, .97, 1.00, 1.25,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));
enddef;


def upstemtripleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 3;
  total_depth# = (4.25 - shortening) * staff_space# - blot_diameter# / 2;
  flare = .85 staff_space;
  flagspace# = .87 staff_space#;
  hip_depth_ratio = .72;
  hip_width# = upflag_width# - hip_thickness# / 2;
  foot_width_ratio = .8;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_upflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 1);

  add_flag (flagspace, flare, .97, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, .95, 1.05, 1.25,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));
enddef;


def upstemquadrupleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 4;
  total_depth# = (5.25 - shortening) *  staff_space# - blot_diameter# / 2;
  flare = .85 staff_space;
  flagspace# = .9 staff_space#;
  hip_depth_ratio = .72;
  hip_width# = upflag_width# - hip_thickness# / 2;
  foot_width_ratio = .8;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_upflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 1);

  add_flag (flagspace, flare, .97, 1.00, 1.3,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, .95, 1.05, 1.25,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));
enddef;


def upstemquintupleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 5;
  total_depth# = (6.25 - shortening) *  staff_space# - blot_diameter# / 2;
  flare = .85 staff_space;
  flagspace# = .93 staff_space#;
  hip_depth_ratio = .72;
  hip_width# = upflag_width# - hip_thickness# / 2;
  foot_width_ratio = .8;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_upflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 1);

  add_flag (flagspace, flare, .97, 1.00, 1.3,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 0.95, 1.05, 1.25,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));
enddef;


def upstemsextupleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 6;
  total_depth# = (7.25 - shortening) *  staff_space# - blot_diameter# / 2;
  flare = .85 staff_space;
  flagspace# = .93 staff_space#;
  hip_depth_ratio = .72;
  hip_width# = upflag_width# - hip_thickness# / 2;
  foot_width_ratio = .8;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_upflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 1);

  add_flag (flagspace, flare, .97, 1.00, 1.3,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 0.95, 1.05, 1.25,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));
enddef;


def upstemseptupleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 7;
  total_depth# = (8.25 - shortening) *  staff_space# - blot_diameter# / 2;
  flare = .85 staff_space;
  flagspace# = .93 staff_space#;
  hip_depth_ratio = .72;
  hip_width# = upflag_width# - hip_thickness# / 2;
  foot_width_ratio = .8;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_upflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 1);

  add_flag (flagspace, flare, .97, 1.00, 1.3,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 0.95, 1.05, 1.25,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));
enddef;


def upstemoctupleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 8;
  total_depth# = (9.25 - shortening) *  staff_space# - blot_diameter# / 2;
  flare = .85 staff_space;
  flagspace# = .93 staff_space#;
  hip_depth_ratio = .72;
  hip_width# = upflag_width# - hip_thickness# / 2;
  foot_width_ratio = .8;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_upflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 1);

  add_flag (flagspace, flare, .97, 1.00, 1.3,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.00, 1.00, 1.25,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 0.95, 1.05, 1.25,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));
enddef;




def downstemsingleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 1;
  total_depth# = (2.75 - shortening) * staff_space#;
  flare = staff_space;
  flagspace# = .9 staff_space#;
  hip_depth_ratio = .74;
  hip_width# = downflag_width# - hip_thickness# / 2;
  foot_width_ratio = .85;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_downflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2)

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 0);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));

  y_mirror_char;
enddef;


def downstemdoubleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 2;
  total_depth# = (3.0 - shortening) * staff_space# - blot_diameter# / 2;
  flare = .82 staff_space;
  flagspace# = .9 staff_space#;
  hip_depth_ratio = .85;
  hip_width# = downflag_width# - hip_thickness# / 2;
  foot_width_ratio = .95;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_downflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 0);

  add_flag (flagspace, flare, .95, 1.00, 1.25,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));

  y_mirror_char;
enddef;


def downstemtripleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 3;
  total_depth# = (3.75 - shortening) * staff_space# - blot_diameter# / 2;
  flare = .82 staff_space;
  flagspace# = .88 staff_space#;
  hip_depth_ratio = .87;
  hip_width# = downflag_width# - hip_thickness# / 2;
  foot_width_ratio = .965;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_downflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 0);

  add_flag (flagspace, flare, .98, 1.00, 1.22,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, .95, 1.02, 1.22,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));

  y_mirror_char;
enddef;


def downstemquadrupleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 4;
  total_depth# = (4.5 - shortening) * staff_space# - blot_diameter# / 2;
  flare = .8 staff_space;
  flagspace# = .9 staff_space#;
  hip_depth_ratio = .83;
  hip_width# = downflag_width# - hip_thickness# / 2;
  foot_width_ratio = .975;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_downflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 0);

  add_flag (flagspace, flare, .98, 1.10, 1.19,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, .98, 1.08, 1.19,
            hip_thickness, foot_thickness);
  add_flag (.98 flagspace, flare, .94, 1.04, 1.21,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));

  y_mirror_char;
enddef;


def downstemquintupleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 5;
  total_depth# = (5.5 - shortening) * staff_space# - blot_diameter# / 2;
  flare = .8 staff_space;
  flagspace# = .92 staff_space#;
  hip_depth_ratio = .85;
  hip_width# = downflag_width# - hip_thickness# / 2;
  foot_width_ratio = .98;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_downflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 0);

  add_flag (flagspace, flare, .98, 1.10, 1.185,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, .98, 1.08, 1.185,
            hip_thickness, foot_thickness);
  add_flag (.98 flagspace, flare, .97, 1.06, 1.2,
            hip_thickness, foot_thickness);
  add_flag (.98 flagspace, flare, .93, 1.04, 1.22,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));

  y_mirror_char;
enddef;


def downstemsextupleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 6;
  total_depth# = (6.5 - shortening) * staff_space# - blot_diameter# / 2;
  flare = .8 staff_space;
  flagspace# = .94 staff_space#;
  hip_depth_ratio = .86;
  hip_width# = downflag_width# - hip_thickness# / 2;
  foot_width_ratio = .98;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_downflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 0);

  add_flag (flagspace, flare, .98, 1.10, 1.185,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, .98, 1.08, 1.185,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.0, 1.06, 1.2,
            hip_thickness, foot_thickness);
  add_flag (.98 flagspace, flare, .97, 1.04, 1.2,
            hip_thickness, foot_thickness);
  add_flag (.98 flagspace, flare, .93, 1.0, 1.2,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));

  y_mirror_char;
enddef;


def downstemseptupleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 7;
  total_depth# = (7.5 - shortening) * staff_space# - blot_diameter# / 2;
  flare = .8 staff_space;
  flagspace# = .95 staff_space#;
  hip_depth_ratio = .87;
  hip_width# = downflag_width# - hip_thickness# / 2;
  foot_width_ratio = .98;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_downflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 0);

  add_flag (flagspace, flare, .98, 1.10, 1.185,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, .98, 1.08, 1.185,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.0, 1.06, 1.2,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.0, 1.04, 1.2,
            hip_thickness, foot_thickness);
  add_flag (.98 flagspace, flare, .97, 1.0, 1.22,
            hip_thickness, foot_thickness);
  add_flag (.98 flagspace, flare, .93, 1.0, 1.22,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));

  y_mirror_char;
enddef;


def downstemoctupleflag (expr shortening) =
  save flare, hip_depth_ratio, hip_width, foot_depth, foot_width_ratio;
  save flagspace, total_depth, flag_count;

  flag_count = 8;
  total_depth# = (8.5 - shortening) * staff_space# - blot_diameter# / 2;
  flare = .8 staff_space;
  flagspace# = .96 staff_space#;
  hip_depth_ratio = .88;
  hip_width# = downflag_width# - hip_thickness# / 2;
  foot_width_ratio = .98;

  (flag_count - 1) * flagspace# + foot_depth# = total_depth#;

  define_pixels (hip_width, foot_depth);
  define_whole_vertical_pixels (flagspace);

  set_char_box (0, hip_width# + right_downflag_space#,
                total_depth# + foot_thickness# / 2, stemthickness# / 2);

  draw_flag ((0, -(flag_count - 1) * flagspace),
             flare, (hip_width, foot_depth),
             hip_depth_ratio, foot_width_ratio,
             hip_thickness, foot_thickness, 0);

  add_flag (flagspace, flare, .98, 1.10, 1.185,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, .98, 1.08, 1.185,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.0, 1.06, 1.2,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.0, 1.04, 1.2,
            hip_thickness, foot_thickness);
  add_flag (flagspace, flare, 1.0, 1.0, 1.2,
            hip_thickness, foot_thickness);
  add_flag (.98 flagspace, flare, .97, 1.0, 1.22,
            hip_thickness, foot_thickness);
  add_flag (.98 flagspace, flare, .93, 1.0, 1.22,
            hip_thickness, foot_thickness);

  draw_square_block ((-0.5 stemthickness_rounded, 0),
                     (0, (-flag_count * staff_space_rounded)));

  y_mirror_char;
enddef;




fet_beginchar ("8th flag (up)", "u3");
  upstemsingleflag (0.0);
fet_endchar;


fet_beginchar ("16th flag (up)", "u4");
  upstemdoubleflag (0);
fet_endchar;


fet_beginchar ("32nd flag (up)", "u5");
  upstemtripleflag (0);
fet_endchar;


fet_beginchar ("64th flag (up)", "u6");
  upstemquadrupleflag (0);
fet_endchar;


fet_beginchar ("128th flag (up)", "u7");
  upstemquintupleflag (0);
fet_endchar;


fet_beginchar ("256th flag (up)", "u8");
  upstemsextupleflag (0);
fet_endchar;


fet_beginchar ("512th flag (up)", "u9");
  upstemseptupleflag (0);
fet_endchar;


fet_beginchar ("1024th flag (up)", "u10");
  upstemoctupleflag (0);
fet_endchar;





fet_beginchar ("8th flag (down)", "d3");
  downstemsingleflag (0.0);
fet_endchar;


fet_beginchar ("16th flag (down) 3", "d4");
  downstemdoubleflag (0);
fet_endchar;


fet_beginchar ("32nd flag (down)", "d5");
  downstemtripleflag (0);
fet_endchar;


fet_beginchar ("64th flag (down)", "d6");
  downstemquadrupleflag (0);
fet_endchar;


fet_beginchar ("128th flag (down)", "d7");
  downstemquintupleflag (0);
fet_endchar;


fet_beginchar ("256th flag (down)", "d8");
  downstemsextupleflag (0);
fet_endchar;


fet_beginchar ("512th flag (down)", "d9");
  downstemseptupleflag (0);
fet_endchar;


fet_beginchar ("1024th flag (down)", "d10");
  downstemoctupleflag (0);
fet_endchar;




%%%%%%%%
%
% Single Stroke for Short Appoggiatura
%

fet_beginchar ("grace dash (up)", "ugrace");
  save flare, hip_depth_ratio, hip_width, foot_depth;

  hip_depth_ratio = .72;
  flare# = staff_space#;
  hip_width# = upflag_width# - hip_thickness# / 2;
  foot_depth# = 3 staff_space#;

  define_pixels (hip_width, foot_depth);

  set_char_box (hip_width# * hip_depth_ratio,
                hip_width# + right_upflag_space#,
                foot_depth# * hip_depth_ratio, -flare#)

  pickup pencircle scaled 1.5 stemthickness;

  z1 = (-b, -d);
  z2 = (w, h);

  penpos1 (1.5 stemthickness, angle (z2 - z1) - 90);
  penpos2 (1.5 stemthickness, angle (z2 - z1) - 90);

  fill z1l
       -- z2l
       .. top z2
       .. rt z2
       .. z2r
       -- z1r
       .. bot z1
       .. lft z1
       .. cycle;

  penlabels (1, 2);
fet_endchar;


fet_beginchar ("grace dash (down)", "dgrace");
  save flare, hip_depth_ratio, hip_width, foot_depth;
  save total_depth;

  hip_depth_ratio = .72 ;
  flare# = .99 staff_space#;
  hip_width# = downflag_width# - hip_thickness# / 2;
  total_depth# = 2.85 staff_space#;
  foot_depth# = total_depth#;
  foot_width_ratio = .8;

  define_pixels (hip_width, foot_depth);

  set_char_box (hip_width# * hip_depth_ratio,
                hip_width# + right_downflag_space#,
                foot_depth# * hip_depth_ratio, -flare#)

  pickup pencircle scaled 1.5 stemthickness;

  z1 = (-b, -d);
  z2 = (w, h);

  penpos1 (1.5 stemthickness, angle (z2 - z1) - 90);
  penpos2 (1.5 stemthickness, angle (z2 - z1) - 90);

  fill z1l
       -- z2l
       .. top z2
       .. rt z2
       .. z2r
       -- z1r
       .. bot z1
       .. lft z1
       .. cycle;

  y_mirror_char;
fet_endchar;

fet_endgroup ("flags");
